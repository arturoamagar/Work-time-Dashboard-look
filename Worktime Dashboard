<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Work Time Analytics Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .dashboard-container {
        max-width: 1600px;
        margin: 0 auto;
    }

    .header {
        background: white;
        padding: 25px 30px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .header h1 {
        color: #2d3748;
        font-size: 28px;
        margin-bottom: 10px;
    }

    .header p {
        color: #718096;
        font-size: 14px;
    }

    .upload-section {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        text-align: center;
    }

    .upload-area {
        border: 3px dashed #cbd5e0;
        border-radius: 8px;
        padding: 40px;
        transition: all 0.3s ease;
        cursor: pointer;
        background: #f7fafc;
    }

    .upload-area:hover {
        border-color: #667eea;
        background: #edf2f7;
    }

    .upload-area.dragover {
        border-color: #667eea;
        background: #e6fffa;
    }

    .upload-icon {
        font-size: 48px;
        margin-bottom: 15px;
    }

    .upload-text {
        color: #4a5568;
        font-size: 16px;
        margin-bottom: 10px;
    }

    .upload-subtext {
        color: #a0aec0;
        font-size: 14px;
    }

    #fileInput {
        display: none;
    }

    .filters-section {
        background: white;
        padding: 20px 30px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        display: none;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-group label {
        color: #4a5568;
        font-size: 13px;
        font-weight: 600;
        margin-bottom: 5px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .filter-group select {
        padding: 10px;
        border: 2px solid #e2e8f0;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        cursor: pointer;
        transition: border-color 0.3s;
    }

    .filter-group select:focus {
        outline: none;
        border-color: #667eea;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .metric-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        display: none;
    }

    .metric-label {
        color: #718096;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 10px;
    }

    .metric-value {
        color: #2d3748;
        font-size: 32px;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .metric-subtitle {
        color: #a0aec0;
        font-size: 13px;
    }

    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .chart-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        display: none;
    }

    .chart-card h3 {
        color: #2d3748;
        font-size: 18px;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .chart-container {
        position: relative;
        height: 300px;
    }

    .table-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        display: none;
    }

    .table-card h3 {
        color: #2d3748;
        font-size: 18px;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .search-box {
        margin-bottom: 20px;
        position: relative;
    }

    .search-box input {
        width: 100%;
        padding: 12px 40px 12px 15px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s;
    }

    .search-box input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #a0aec0;
    }

    .records-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 15px;
        max-height: 600px;
        overflow-y: auto;
        padding-right: 10px;
    }

    .records-container::-webkit-scrollbar {
        width: 8px;
    }

    .records-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .records-container::-webkit-scrollbar-thumb {
        background: #cbd5e0;
        border-radius: 10px;
    }

    .records-container::-webkit-scrollbar-thumb:hover {
        background: #a0aec0;
    }

    .record-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 12px;
        padding: 20px;
        color: white;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .record-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .record-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    }

    .record-card:hover::before {
        opacity: 1;
    }

    .record-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        position: relative;
        z-index: 1;
    }

    .record-user {
        font-size: 20px;
        font-weight: bold;
        text-transform: capitalize;
    }

    .record-date {
        font-size: 12px;
        opacity: 0.9;
        background: rgba(255,255,255,0.2);
        padding: 4px 10px;
        border-radius: 12px;
    }

    .record-times {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 15px;
        position: relative;
        z-index: 1;
    }

    .time-block {
        background: rgba(255,255,255,0.15);
        padding: 12px;
        border-radius: 8px;
        backdrop-filter: blur(10px);
    }

    .time-label {
        font-size: 11px;
        opacity: 0.8;
        margin-bottom: 5px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .time-value {
        font-size: 14px;
        font-weight: 600;
    }

    .record-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 15px;
        border-top: 1px solid rgba(255,255,255,0.2);
        position: relative;
        z-index: 1;
    }

    .work-hours {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .hours-icon {
        font-size: 20px;
    }

    .hours-text {
        font-size: 24px;
        font-weight: bold;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-success {
        background: rgba(72, 187, 120, 0.9);
    }

    .status-warning {
        background: rgba(237, 137, 54, 0.9);
    }

    .status-danger {
        background: rgba(245, 101, 101, 0.9);
    }

    .no-results {
        text-align: center;
        padding: 60px 20px;
        color: #a0aec0;
        font-size: 16px;
    }

    .no-results-icon {
        font-size: 64px;
        margin-bottom: 15px;
        opacity: 0.5;
    }

    @media (max-width: 768px) {
        .charts-grid {
            grid-template-columns: 1fr;
        }
        
        .metrics-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
```

</head>
<body>
    <div class="dashboard-container">
        <div class="header">
            <h1>üìä Work Time Analytics Dashboard</h1>
            <p>Upload your CSV file to visualize employee work time data</p>
        </div>

```
    <div class="upload-section" id="uploadSection">
        <div class="upload-area" id="uploadArea">
            <div class="upload-icon">üìÅ</div>
            <div class="upload-text">Drop your CSV file here or click to browse</div>
            <div class="upload-subtext">Supports CSV files with columns: User, Login Time, Logout Time, Work Time</div>
        </div>
        <input type="file" id="fileInput" accept=".csv">
    </div>

    <div class="filters-section" id="filtersSection">
        <div class="filters-grid">
            <div class="filter-group">
                <label>Filter by User</label>
                <select id="userFilter">
                    <option value="all">All Users</option>
                </select>
            </div>
            <div class="filter-group">
                <label>Date Range</label>
                <select id="dateFilter">
                    <option value="all">All Dates</option>
                    <option value="week">Last 7 Days</option>
                    <option value="month">Last 30 Days</option>
                </select>
            </div>
        </div>
    </div>

    <div class="metrics-grid">
        <div class="metric-card" id="totalHoursCard">
            <div class="metric-label">Total Work Hours</div>
            <div class="metric-value" id="totalHours">0</div>
            <div class="metric-subtitle">Across all employees</div>
        </div>
        <div class="metric-card" id="avgHoursCard">
            <div class="metric-label">Average Daily Hours</div>
            <div class="metric-value" id="avgHours">0</div>
            <div class="metric-subtitle">Per employee per day</div>
        </div>
        <div class="metric-card" id="totalEmployeesCard">
            <div class="metric-label">Total Employees</div>
            <div class="metric-value" id="totalEmployees">0</div>
            <div class="metric-subtitle">Active in this period</div>
        </div>
        <div class="metric-card" id="totalDaysCard">
            <div class="metric-label">Total Work Days</div>
            <div class="metric-value" id="totalDays">0</div>
            <div class="metric-subtitle">Logged in the system</div>
        </div>
    </div>

    <div class="charts-grid">
        <div class="chart-card" id="userChart">
            <h3>Work Hours by Employee</h3>
            <div class="chart-container">
                <canvas id="userChartCanvas"></canvas>
            </div>
        </div>
        <div class="chart-card" id="trendChart">
            <h3>Daily Work Hours Trend</h3>
            <div class="chart-container">
                <canvas id="trendChartCanvas"></canvas>
            </div>
        </div>
    </div>

    <div class="table-card" id="dataTable">
        <h3>Detailed Work Time Records</h3>
        <div class="search-box">
            <input type="text" id="searchInput" placeholder="Search by employee name...">
            <span class="search-icon">üîç</span>
        </div>
        <div class="records-container" id="recordsContainer">
        </div>
    </div>
</div>

<script>
    let rawData = [];
    let filteredData = [];
    let charts = {};

    // Sample data
    const sampleData = `User,Login Time,Logout Time,Work Time
```

adrian,2025-10-20 08:09:00,2025-10-20 17:02:00,08:53
adrian,2025-10-21 08:30:00,2025-10-21 17:04:00,08:34
adrian,2025-10-22 08:31:00,2025-10-22 17:08:00,08:37
adrian,2025-10-23 08:07:00,2025-10-23 16:09:00,08:02
ajimenez,2025-10-20 08:38:00,2025-10-20 16:56:00,08:16
ajimenez,2025-10-21 08:43:00,2025-10-21 16:46:00,08:03
ajimenez,2025-10-22 08:54:00,2025-10-22 17:05:00,08:11
ajimenez,2025-10-23 08:38:00,2025-10-23 16:57:00,08:19
Andrea,2025-10-20 08:38:00,2025-10-20 16:55:00,08:17
Andrea,2025-10-21 08:37:00,2025-10-21 19:28:00,10:51
Arturo,2025-10-22 08:03:00,2025-10-22 17:23:00,09:20
Arturo,2025-10-23 08:41:00,2025-10-23 17:25:00,08:44
brenda,2025-10-20 08:43:00,2025-10-20 17:07:00,08:24
brenda,2025-10-21 08:37:00,2025-10-21 17:16:00,08:39
brenda,2025-10-22 08:41:00,2025-10-22 17:25:00,08:44
brenda,2025-10-23 08:38:00,2025-10-23 17:19:00,08:41
carolina,2025-10-20 09:23:00,2025-10-20 16:59:00,07:36
carolina,2025-10-21 08:40:00,2025-10-21 17:03:00,08:23
carolina,2025-10-22 08:47:00,2025-10-22 17:03:00,08:16
carolina,2025-10-23 08:27:00,2025-10-23 17:03:00,08:36`;

```
    // Initialize with sample data
    window.addEventListener('load', () => {
        parseCSV(sampleData);
    });

    // File upload handling
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');

    uploadArea.addEventListener('click', () => fileInput.click());

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFile(files[0]);
        }
    });

    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFile(e.target.files[0]);
        }
    });

    function handleFile(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            parseCSV(e.target.result);
        };
        reader.readAsText(file);
    }

    function parseCSV(csvText) {
        Papa.parse(csvText, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                rawData = results.data.map(row => {
                    const workTimeParts = row['Work Time'].split(':');
                    const hours = parseFloat(workTimeParts[0]) + parseFloat(workTimeParts[1]) / 60;
                    
                    return {
                        user: row.User.trim(),
                        loginTime: row['Login Time'],
                        logoutTime: row['Logout Time'],
                        workTime: row['Work Time'],
                        workHours: hours,
                        date: row['Login Time'].split(' ')[0]
                    };
                });
                
                filteredData = [...rawData];
                initializeDashboard();
            }
        });
    }

    function initializeDashboard() {
        document.getElementById('filtersSection').style.display = 'block';
        document.querySelectorAll('.metric-card').forEach(card => card.style.display = 'block');
        document.querySelectorAll('.chart-card').forEach(card => card.style.display = 'block');
        document.getElementById('dataTable').style.display = 'block';

        populateFilters();
        updateDashboard();
    }

    function populateFilters() {
        const users = [...new Set(rawData.map(d => d.user))].sort();
        const userFilter = document.getElementById('userFilter');
        userFilter.innerHTML = '<option value="all">All Users</option>';
        users.forEach(user => {
            const option = document.createElement('option');
            option.value = user;
            option.textContent = user;
            userFilter.appendChild(option);
        });

        document.getElementById('userFilter').addEventListener('change', applyFilters);
        document.getElementById('dateFilter').addEventListener('change', applyFilters);
    }

    function applyFilters() {
        const userFilter = document.getElementById('userFilter').value;
        const dateFilter = document.getElementById('dateFilter').value;

        filteredData = rawData.filter(record => {
            if (userFilter !== 'all' && record.user !== userFilter) return false;
            
            if (dateFilter !== 'all') {
                const recordDate = new Date(record.date);
                const today = new Date();
                const daysDiff = Math.floor((today - recordDate) / (1000 * 60 * 60 * 24));
                
                if (dateFilter === 'week' && daysDiff > 7) return false;
                if (dateFilter === 'month' && daysDiff > 30) return false;
            }
            
            return true;
        });

        updateDashboard();
    }

    function updateDashboard() {
        updateMetrics();
        updateCharts();
        updateTable();
    }

    function updateMetrics() {
        const totalHours = filteredData.reduce((sum, d) => sum + d.workHours, 0);
        const avgHours = totalHours / filteredData.length;
        const uniqueUsers = new Set(filteredData.map(d => d.user)).size;
        const uniqueDays = new Set(filteredData.map(d => d.date)).size;

        document.getElementById('totalHours').textContent = totalHours.toFixed(1) + 'h';
        document.getElementById('avgHours').textContent = avgHours.toFixed(1) + 'h';
        document.getElementById('totalEmployees').textContent = uniqueUsers;
        document.getElementById('totalDays').textContent = uniqueDays;
    }

    function updateCharts() {
        // User chart
        const userHours = {};
        filteredData.forEach(record => {
            userHours[record.user] = (userHours[record.user] || 0) + record.workHours;
        });

        const userLabels = Object.keys(userHours).sort();
        const userData = userLabels.map(user => userHours[user]);

        if (charts.userChart) charts.userChart.destroy();
        charts.userChart = new Chart(document.getElementById('userChartCanvas'), {
            type: 'bar',
            data: {
                labels: userLabels,
                datasets: [{
                    label: 'Total Hours',
                    data: userData,
                    backgroundColor: 'rgba(102, 126, 234, 0.8)',
                    borderColor: 'rgba(102, 126, 234, 1)',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Hours' }
                    }
                }
            }
        });

        // Trend chart
        const dateHours = {};
        filteredData.forEach(record => {
            dateHours[record.date] = (dateHours[record.date] || 0) + record.workHours;
        });

        const dateLabels = Object.keys(dateHours).sort();
        const dateData = dateLabels.map(date => dateHours[date]);

        if (charts.trendChart) charts.trendChart.destroy();
        charts.trendChart = new Chart(document.getElementById('trendChartCanvas'), {
            type: 'line',
            data: {
                labels: dateLabels,
                datasets: [{
                    label: 'Total Hours',
                    data: dateData,
                    backgroundColor: 'rgba(118, 75, 162, 0.2)',
                    borderColor: 'rgba(118, 75, 162, 1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Hours' }
                    }
                }
            }
        });
    }

    function updateTable() {
        const container = document.getElementById('recordsContainer');
        const searchInput = document.getElementById('searchInput');
        
        // Add search functionality
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const cards = container.querySelectorAll('.record-card');
            
            cards.forEach(card => {
                const userName = card.dataset.user.toLowerCase();
                if (userName.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
        
        container.innerHTML = '';

        if (filteredData.length === 0) {
            container.innerHTML = `
                <div class="no-results">
                    <div class="no-results-icon">üì≠</div>
                    <div>No records found</div>
                </div>
            `;
            return;
        }

        filteredData.forEach(record => {
            const hours = record.workHours;
            let statusClass = '';
            let statusText = '';
            
            if (hours >= 9) {
                statusClass = 'status-success';
                statusText = 'Full Day';
            } else if (hours >= 7) {
                statusClass = 'status-warning';
                statusText = 'Regular';
            } else {
                statusClass = 'status-danger';
                statusText = 'Short Day';
            }

            const card = document.createElement('div');
            card.className = 'record-card';
            card.dataset.user = record.user;
            
            const loginTime = record.loginTime.split(' ')[1].substring(0, 5);
            const logoutTime = record.logoutTime.split(' ')[1].substring(0, 5);
            const dateFormatted = new Date(record.date).toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric',
                year: 'numeric'
            });
            
            card.innerHTML = `
                <div class="record-header">
                    <div class="record-user">${record.user}</div>
                    <div class="record-date">${dateFormatted}</div>
                </div>
                <div class="record-times">
                    <div class="time-block">
                        <div class="time-label">Login</div>
                        <div class="time-value">üü¢ ${loginTime}</div>
                    </div>
                    <div class="time-block">
                        <div class="time-label">Logout</div>
                        <div class="time-value">üî¥ ${logoutTime}</div>
                    </div>
                </div>
                <div class="record-footer">
                    <div class="work-hours">
                        <span class="hours-icon">‚è±Ô∏è</span>
                        <span class="hours-text">${record.workTime}</span>
                    </div>
                    <div class="status-badge ${statusClass}">${statusText}</div>
                </div>
            `;
            
            container.appendChild(card);
        });
    }
</script>
```

</body>
</html>
